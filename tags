!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AIO_BLKSIZE	main.cpp	17;"	d	file:
AIO_MAXIO	main.cpp	18;"	d	file:
Buffer	aio.cpp	/^Buffer::Buffer(char*addr, size_t size, size_t id)$/;"	f	class:Buffer	signature:(char*addr, size_t size, size_t id)
Buffer	aio.h	/^		Buffer(char*addr, size_t size, size_t id);$/;"	p	class:Buffer	access:public	signature:(char*addr, size_t size, size_t id)
Buffer	aio.h	/^class Buffer$/;"	c
Buffer::Buffer	aio.cpp	/^Buffer::Buffer(char*addr, size_t size, size_t id)$/;"	f	class:Buffer	signature:(char*addr, size_t size, size_t id)
Buffer::Buffer	aio.h	/^		Buffer(char*addr, size_t size, size_t id);$/;"	p	class:Buffer	access:public	signature:(char*addr, size_t size, size_t id)
Buffer::mBuf	aio.h	/^		char*     mBuf;$/;"	m	class:Buffer	access:private
Buffer::mBufSize	aio.h	/^		size_t    mBufSize;$/;"	m	class:Buffer	access:private
Buffer::mFd	aio.h	/^		int       mFd;$/;"	m	class:Buffer	access:private
Buffer::mFileSize	aio.h	/^		int       mFileSize;$/;"	m	class:Buffer	access:private
Buffer::mId	aio.h	/^		size_t    mId;$/;"	m	class:Buffer	access:private
Buffer::mOrigOffset	aio.h	/^		int       mOrigOffset;$/;"	m	class:Buffer	access:private
Buffer::reqId	aio.h	/^		int       reqId;$/;"	m	class:Buffer	access:private
Buffer::~Buffer	aio.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer	signature:()
Buffer::~Buffer	aio.h	/^		~Buffer();$/;"	p	class:Buffer	access:public	signature:()
BufferUser	aio.cpp	/^BufferUser::BufferUser(Buffer* buf)$/;"	f	class:BufferUser	signature:(Buffer* buf)
BufferUser	aio.h	/^		BufferUser();$/;"	p	class:BufferUser	access:public	signature:()
BufferUser	aio.h	/^		BufferUser(Buffer* buf);$/;"	p	class:BufferUser	access:public	signature:(Buffer* buf)
BufferUser	aio.h	/^		BufferUser(const BufferUser&);$/;"	p	class:BufferUser	access:public	signature:(const BufferUser&)
BufferUser	aio.h	/^class BufferUser$/;"	c
BufferUser::BufferUser	aio.cpp	/^BufferUser::BufferUser(Buffer* buf)$/;"	f	class:BufferUser	signature:(Buffer* buf)
BufferUser::BufferUser	aio.h	/^		BufferUser();$/;"	p	class:BufferUser	access:public	signature:()
BufferUser::BufferUser	aio.h	/^		BufferUser(Buffer* buf);$/;"	p	class:BufferUser	access:public	signature:(Buffer* buf)
BufferUser::BufferUser	aio.h	/^		BufferUser(const BufferUser&);$/;"	p	class:BufferUser	access:public	signature:(const BufferUser&)
BufferUser::mBuf	aio.h	/^		Buffer* mBuf;$/;"	m	class:BufferUser	access:private
BufferUser::mOffset	aio.h	/^		size_t mOffset;$/;"	m	class:BufferUser	access:private
BufferUser::operator =	aio.h	/^		BufferUser& operator=(const BufferUser&);$/;"	p	class:BufferUser	access:public	signature:(const BufferUser&)
BufferUser::valid	aio.h	/^		bool valid()const$/;"	f	class:BufferUser	access:public	signature:() const
BufferUser::~BufferUser	aio.h	/^		~BufferUser();$/;"	p	class:BufferUser	access:public	signature:()
CFLAGS	makefile	/^CFLAGS = -g$/;"	m
Fruit	test.py	/^class Fruit:$/;"	c	inherits:
INCDIR	makefile	/^INCDIR := . ..\/Common\/$/;"	m
OBJS	makefile	/^OBJS   :=   main.o  aaa.o aio.o #socket.o socket_linux.o eventloop.o eventloop_linux.o $/;"	m
Path	makefile	/^Path := \/home\/jinze.ji\/git22\/zq\/TianShan\/bin64\/$/;"	m
Serv	aaa.cpp	/^Serv::Serv()$/;"	f	class:Serv	signature:()
Serv	aaa.h	/^		Serv();$/;"	p	class:Serv	access:public	signature:()
Serv	aaa.h	/^class Serv : public ZQ::common::NativeThread$/;"	c	inherits:ZQ::common::NativeThread
Serv::Serv	aaa.cpp	/^Serv::Serv()$/;"	f	class:Serv	signature:()
Serv::Serv	aaa.h	/^		Serv();$/;"	p	class:Serv	access:public	signature:()
Serv::mThreadPool	aaa.h	/^		ZQ::common::NativeThreadPool*  mThreadPool;$/;"	m	class:Serv	access:private
Serv::mbQuit	aaa.h	/^		bool   mbQuit;$/;"	m	class:Serv	access:private
Serv::run	aaa.cpp	/^int Serv::run()$/;"	f	class:Serv	signature:()
Serv::run	aaa.h	/^		virtual int     run();$/;"	p	class:Serv	access:public	signature:()
Serv::startService	aaa.cpp	/^bool Serv::startService()$/;"	f	class:Serv	signature:()
Serv::startService	aaa.h	/^		bool    startService();$/;"	p	class:Serv	access:public	signature:()
Serv::~Serv	aaa.cpp	/^Serv::~Serv()$/;"	f	class:Serv	signature:()
Serv::~Serv	aaa.h	/^		virtual ~Serv();$/;"	p	class:Serv	access:public	signature:()
SlaveThread	aaa.cpp	/^SlaveThread::SlaveThread(ThreadPool& pool)$/;"	f	class:SlaveThread	signature:(ThreadPool& pool)
SlaveThread	aaa.h	/^		SlaveThread(ThreadPool& pool);$/;"	p	class:SlaveThread	access:public	signature:(ThreadPool& pool)
SlaveThread	aaa.h	/^class SlaveThread : public ZQ::common::NativeThread$/;"	c	inherits:ZQ::common::NativeThread
SlaveThread::SlaveThread	aaa.cpp	/^SlaveThread::SlaveThread(ThreadPool& pool)$/;"	f	class:SlaveThread	signature:(ThreadPool& pool)
SlaveThread::SlaveThread	aaa.h	/^		SlaveThread(ThreadPool& pool);$/;"	p	class:SlaveThread	access:public	signature:(ThreadPool& pool)
SlaveThread::comesNewRequest	aaa.cpp	/^void SlaveThread::comesNewRequest(ThreadRequest* req)$/;"	f	class:SlaveThread	signature:(ThreadRequest* req)
SlaveThread::comesNewRequest	aaa.h	/^		void  comesNewRequest(ThreadRequest* req = NULL);$/;"	p	class:SlaveThread	access:public	signature:(ThreadRequest* req = NULL)
SlaveThread::mPool	aaa.h	/^		ThreadPool&            mPool;$/;"	m	class:SlaveThread	access:private
SlaveThread::mRequest	aaa.h	/^		ThreadRequest*         mRequest;$/;"	m	class:SlaveThread	access:private
SlaveThread::mSem	aaa.h	/^		ZQ::common::Semaphore  mSem;$/;"	m	class:SlaveThread	access:private
SlaveThread::mbQuit	aaa.h	/^		bool                   mbQuit;$/;"	m	class:SlaveThread	access:private
SlaveThread::run	aaa.cpp	/^int SlaveThread::run()$/;"	f	class:SlaveThread	signature:()
SlaveThread::run	aaa.h	/^		int   run();$/;"	p	class:SlaveThread	access:public	signature:()
SlaveThread::stop	aaa.cpp	/^void SlaveThread::stop()$/;"	f	class:SlaveThread	signature:()
SlaveThread::stop	aaa.h	/^		void  stop();$/;"	p	class:SlaveThread	access:public	signature:()
SlaveThread::~SlaveThread	aaa.cpp	/^SlaveThread::~SlaveThread()$/;"	f	class:SlaveThread	signature:()
SlaveThread::~SlaveThread	aaa.h	/^		virtual ~SlaveThread();$/;"	p	class:SlaveThread	access:public	signature:()
TARGET	makefile	/^TARGET := test $/;"	m
TOPDIR	makefile	/^TOPDIR := \/home\/jinze.ji\/git22\/zq\/$/;"	m
TaskRunner	aaa.cpp	/^TaskRunner::TaskRunner(ThreadPool& pool)$/;"	f	class:TaskRunner	signature:(ThreadPool& pool)
TaskRunner	aaa.h	/^		TaskRunner(ThreadPool& pool);$/;"	p	class:TaskRunner	access:public	signature:(ThreadPool& pool)
TaskRunner	aaa.h	/^class TaskRunner : public ThreadRequest$/;"	c	inherits:ThreadRequest
TaskRunner::TaskRunner	aaa.cpp	/^TaskRunner::TaskRunner(ThreadPool& pool)$/;"	f	class:TaskRunner	signature:(ThreadPool& pool)
TaskRunner::TaskRunner	aaa.h	/^		TaskRunner(ThreadPool& pool);$/;"	p	class:TaskRunner	access:public	signature:(ThreadPool& pool)
TaskRunner::final	aaa.cpp	/^void TaskRunner::final(int retcode, bool bCancelled)$/;"	f	class:TaskRunner	signature:(int retcode, bool bCancelled)
TaskRunner::final	aaa.h	/^		void final(int retcode = 0, bool bCancelled = false); $/;"	p	class:TaskRunner	access:protected	signature:(int retcode = 0, bool bCancelled = false)
TaskRunner::run	aaa.cpp	/^int TaskRunner::run()$/;"	f	class:TaskRunner	signature:()
TaskRunner::run	aaa.h	/^		int run();$/;"	p	class:TaskRunner	access:protected	signature:()
TaskRunner::~TaskRunner	aaa.cpp	/^TaskRunner::~TaskRunner()$/;"	f	class:TaskRunner	signature:()
TaskRunner::~TaskRunner	aaa.h	/^		virtual ~TaskRunner();$/;"	p	class:TaskRunner	access:public	signature:()
ThreadPool	aaa.cpp	/^ThreadPool::ThreadPool(size_t size)$/;"	f	class:ThreadPool	signature:(size_t size)
ThreadPool	aaa.h	/^		ThreadPool(size_t size = 10);$/;"	p	class:ThreadPool	access:public	signature:(size_t size = 10)
ThreadPool	aaa.h	/^class ThreadPool : public ZQ::common::NativeThreadPool$/;"	c	inherits:ZQ::common::NativeThreadPool
ThreadPool::ThreadPool	aaa.cpp	/^ThreadPool::ThreadPool(size_t size)$/;"	f	class:ThreadPool	signature:(size_t size)
ThreadPool::ThreadPool	aaa.h	/^		ThreadPool(size_t size = 10);$/;"	p	class:ThreadPool	access:public	signature:(size_t size = 10)
ThreadPool::activeCount	aaa.cpp	/^size_t ThreadPool::activeCount() const$/;"	f	class:ThreadPool	signature:() const
ThreadPool::activeCount	aaa.h	/^		size_t      activeCount()const;$/;"	p	class:ThreadPool	access:public	signature:() const
ThreadPool::getRequest	aaa.cpp	/^ThreadRequest* ThreadPool::getRequest(SlaveThread* t)$/;"	f	class:ThreadPool	signature:(SlaveThread* t)
ThreadPool::getRequest	aaa.h	/^		ThreadRequest*    getRequest(SlaveThread* t);$/;"	p	class:ThreadPool	access:protected	signature:(SlaveThread* t)
ThreadPool::mAllThreads	aaa.h	/^		std::vector<SlaveThread*>    mAllThreads;$/;"	m	class:ThreadPool	access:private
ThreadPool::mIdleThreads	aaa.h	/^		std::list<SlaveThread*>      mIdleThreads;$/;"	m	class:ThreadPool	access:private
ThreadPool::mLocker	aaa.h	/^		ZQ::common::Mutex            mLocker;$/;"	m	class:ThreadPool	access:private
ThreadPool::mRequests	aaa.h	/^		std::list<ThreadRequest*>    mRequests;$/;"	m	class:ThreadPool	access:private
ThreadPool::mbQuit	aaa.h	/^		bool                         mbQuit;$/;"	m	class:ThreadPool	access:private
ThreadPool::pendingRequestSize	aaa.cpp	/^size_t ThreadPool::pendingRequestSize() const$/;"	f	class:ThreadPool	signature:() const
ThreadPool::pendingRequestSize	aaa.h	/^		size_t            pendingRequestSize()const;$/;"	p	class:ThreadPool	access:protected	signature:() const
ThreadPool::postRequest	aaa.cpp	/^void ThreadPool::postRequest(ThreadRequest* req)$/;"	f	class:ThreadPool	signature:(ThreadRequest* req)
ThreadPool::postRequest	aaa.h	/^		void              postRequest(ThreadRequest* req);$/;"	p	class:ThreadPool	access:protected	signature:(ThreadRequest* req)
ThreadPool::size	aaa.cpp	/^size_t ThreadPool::size() const$/;"	f	class:ThreadPool	signature:() const
ThreadPool::size	aaa.h	/^		size_t      size() const;$/;"	p	class:ThreadPool	access:public	signature:() const
ThreadPool::stop	aaa.cpp	/^void ThreadPool::stop()$/;"	f	class:ThreadPool	signature:()
ThreadPool::stop	aaa.h	/^		void        stop();$/;"	p	class:ThreadPool	access:public	signature:()
ThreadPool::~ThreadPool	aaa.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
ThreadPool::~ThreadPool	aaa.h	/^		virtual     ~ThreadPool();$/;"	p	class:ThreadPool	access:public	signature:()
ThreadRequest	aaa.cpp	/^ThreadRequest::ThreadRequest(ThreadPool& pool)$/;"	f	class:ThreadRequest	signature:(ThreadPool& pool)
ThreadRequest	aaa.h	/^		ThreadRequest(ThreadPool& pool);$/;"	p	class:ThreadRequest	access:public	signature:(ThreadPool& pool)
ThreadRequest	aaa.h	/^class ThreadRequest$/;"	c
ThreadRequest::ThreadRequest	aaa.cpp	/^ThreadRequest::ThreadRequest(ThreadPool& pool)$/;"	f	class:ThreadRequest	signature:(ThreadPool& pool)
ThreadRequest::ThreadRequest	aaa.h	/^		ThreadRequest(ThreadPool& pool);$/;"	p	class:ThreadRequest	access:public	signature:(ThreadPool& pool)
ThreadRequest::final	aaa.h	/^		virtual void    final(int retcode = 0, bool bCancelled = false){};$/;"	f	class:ThreadRequest	access:public	signature:(int retcode = 0, bool bCancelled = false)
ThreadRequest::init	aaa.h	/^		virtual bool    init(){return true;}$/;"	f	class:ThreadRequest	access:public	signature:()
ThreadRequest::mPool	aaa.h	/^		ThreadPool&   mPool;$/;"	m	class:ThreadRequest	access:private
ThreadRequest::run	aaa.h	/^		virtual int     run() = 0;$/;"	p	class:ThreadRequest	access:public	signature:()
ThreadRequest::start	aaa.cpp	/^void ThreadRequest::start()$/;"	f	class:ThreadRequest	signature:()
ThreadRequest::start	aaa.h	/^		void            start();$/;"	p	class:ThreadRequest	access:public	signature:()
ThreadRequest::~ThreadRequest	aaa.cpp	/^ThreadRequest::~ThreadRequest()$/;"	f	class:ThreadRequest	signature:()
ThreadRequest::~ThreadRequest	aaa.h	/^		virtual ~ThreadRequest();$/;"	p	class:ThreadRequest	access:public	signature:()
__AIO_H__	aio.h	2;"	d
__CONFIG_H__	config.h	2;"	d
__aaa_h__	aaa.h	2;"	d
__init__	test.py	/^	def __init__(self):$/;"	m	class:Fruit	access:public
activeCount	aaa.cpp	/^size_t ThreadPool::activeCount() const$/;"	f	class:ThreadPool	signature:() const
activeCount	aaa.h	/^		size_t      activeCount()const;$/;"	p	class:ThreadPool	access:public	signature:() const
addr	main.cpp	/^char* addr = (char*)memalign(bufsize,bufsize*5);$/;"	v
blocklen	main.cpp	/^const size_t blocklen = 255;$/;"	v
bufsize	config.h	/^const int bufsize = 1024;$/;"	v
comesNewRequest	aaa.cpp	/^void SlaveThread::comesNewRequest(ThreadRequest* req)$/;"	f	class:SlaveThread	signature:(ThreadRequest* req)
comesNewRequest	aaa.h	/^		void  comesNewRequest(ThreadRequest* req = NULL);$/;"	p	class:SlaveThread	access:public	signature:(ThreadRequest* req = NULL)
directory	test.py	/^directory = ["\/sdb\/","\/sdc\/","\/sdd\/","\/sde\/","\/sdf\/"]$/;"	v
final	aaa.cpp	/^void TaskRunner::final(int retcode, bool bCancelled)$/;"	f	class:TaskRunner	signature:(int retcode, bool bCancelled)
final	aaa.h	/^		virtual void    final(int retcode = 0, bool bCancelled = false){};$/;"	f	class:ThreadRequest	access:public	signature:(int retcode = 0, bool bCancelled = false)
final	aaa.h	/^		void final(int retcode = 0, bool bCancelled = false); $/;"	p	class:TaskRunner	access:protected	signature:(int retcode = 0, bool bCancelled = false)
getRequest	aaa.cpp	/^ThreadRequest* ThreadPool::getRequest(SlaveThread* t)$/;"	f	class:ThreadPool	signature:(SlaveThread* t)
getRequest	aaa.h	/^		ThreadRequest*    getRequest(SlaveThread* t);$/;"	p	class:ThreadPool	access:protected	signature:(SlaveThread* t)
grow	test.py	/^	def grow(self):$/;"	m	class:Fruit	access:public
idx	aio.h	/^static int idx = 1;$/;"	v
init	aaa.h	/^		virtual bool    init(){return true;}$/;"	f	class:ThreadRequest	access:public	signature:()
mAllThreads	aaa.h	/^		std::vector<SlaveThread*>    mAllThreads;$/;"	m	class:ThreadPool	access:private
mBuf	aio.h	/^		Buffer* mBuf;$/;"	m	class:BufferUser	access:private
mBuf	aio.h	/^		char*     mBuf;$/;"	m	class:Buffer	access:private
mBufSize	aio.h	/^		size_t    mBufSize;$/;"	m	class:Buffer	access:private
mFd	aio.h	/^		int       mFd;$/;"	m	class:Buffer	access:private
mFileSize	aio.h	/^		int       mFileSize;$/;"	m	class:Buffer	access:private
mId	aio.h	/^		size_t    mId;$/;"	m	class:Buffer	access:private
mIdleThreads	aaa.h	/^		std::list<SlaveThread*>      mIdleThreads;$/;"	m	class:ThreadPool	access:private
mLocker	aaa.h	/^		ZQ::common::Mutex            mLocker;$/;"	m	class:ThreadPool	access:private
mOffset	aio.h	/^		size_t mOffset;$/;"	m	class:BufferUser	access:private
mOrigOffset	aio.h	/^		int       mOrigOffset;$/;"	m	class:Buffer	access:private
mPool	aaa.h	/^		ThreadPool&            mPool;$/;"	m	class:SlaveThread	access:private
mPool	aaa.h	/^		ThreadPool&   mPool;$/;"	m	class:ThreadRequest	access:private
mRequest	aaa.h	/^		ThreadRequest*         mRequest;$/;"	m	class:SlaveThread	access:private
mRequests	aaa.h	/^		std::list<ThreadRequest*>    mRequests;$/;"	m	class:ThreadPool	access:private
mSem	aaa.h	/^		ZQ::common::Semaphore  mSem;$/;"	m	class:SlaveThread	access:private
mThreadPool	aaa.h	/^		ZQ::common::NativeThreadPool*  mThreadPool;$/;"	m	class:Serv	access:private
main	main.cpp	/^int main()$/;"	f	signature:()
mbQuit	aaa.h	/^		bool                         mbQuit;$/;"	m	class:ThreadPool	access:private
mbQuit	aaa.h	/^		bool                   mbQuit;$/;"	m	class:SlaveThread	access:private
mbQuit	aaa.h	/^		bool   mbQuit;$/;"	m	class:Serv	access:private
odsfd	main.cpp	/^int srcfd = -1, odsfd = -1;$/;"	v
operator =	aio.h	/^		BufferUser& operator=(const BufferUser&);$/;"	p	class:BufferUser	access:public	signature:(const BufferUser&)
pendingRequestSize	aaa.cpp	/^size_t ThreadPool::pendingRequestSize() const$/;"	f	class:ThreadPool	signature:() const
pendingRequestSize	aaa.h	/^		size_t            pendingRequestSize()const;$/;"	p	class:ThreadPool	access:protected	signature:() const
postRequest	aaa.cpp	/^void ThreadPool::postRequest(ThreadRequest* req)$/;"	f	class:ThreadPool	signature:(ThreadRequest* req)
postRequest	aaa.h	/^		void              postRequest(ThreadRequest* req);$/;"	p	class:ThreadPool	access:protected	signature:(ThreadRequest* req)
price	test.py	/^	price = 0$/;"	v	class:Fruit
reqId	aio.h	/^		int       reqId;$/;"	m	class:Buffer	access:private
run	aaa.cpp	/^int Serv::run()$/;"	f	class:Serv	signature:()
run	aaa.cpp	/^int SlaveThread::run()$/;"	f	class:SlaveThread	signature:()
run	aaa.cpp	/^int TaskRunner::run()$/;"	f	class:TaskRunner	signature:()
run	aaa.h	/^		int   run();$/;"	p	class:SlaveThread	access:public	signature:()
run	aaa.h	/^		int run();$/;"	p	class:TaskRunner	access:protected	signature:()
run	aaa.h	/^		virtual int     run() = 0;$/;"	p	class:ThreadRequest	access:public	signature:()
run	aaa.h	/^		virtual int     run();$/;"	p	class:Serv	access:public	signature:()
size	aaa.cpp	/^size_t ThreadPool::size() const$/;"	f	class:ThreadPool	signature:() const
size	aaa.h	/^		size_t      size() const;$/;"	p	class:ThreadPool	access:public	signature:() const
srcfd	main.cpp	/^int srcfd = -1, odsfd = -1;$/;"	v
start	aaa.cpp	/^void ThreadRequest::start()$/;"	f	class:ThreadRequest	signature:()
start	aaa.h	/^		void            start();$/;"	p	class:ThreadRequest	access:public	signature:()
startService	aaa.cpp	/^bool Serv::startService()$/;"	f	class:Serv	signature:()
startService	aaa.h	/^		bool    startService();$/;"	p	class:Serv	access:public	signature:()
stop	aaa.cpp	/^void SlaveThread::stop()$/;"	f	class:SlaveThread	signature:()
stop	aaa.cpp	/^void ThreadPool::stop()$/;"	f	class:ThreadPool	signature:()
stop	aaa.h	/^		void        stop();$/;"	p	class:ThreadPool	access:public	signature:()
stop	aaa.h	/^		void  stop();$/;"	p	class:SlaveThread	access:public	signature:()
valid	aio.h	/^		bool valid()const$/;"	f	class:BufferUser	access:public	signature:() const
vecBuf	main.cpp	/^vector<Buffer*>vecBuf;$/;"	v
~Buffer	aio.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer	signature:()
~Buffer	aio.h	/^		~Buffer();$/;"	p	class:Buffer	access:public	signature:()
~BufferUser	aio.h	/^		~BufferUser();$/;"	p	class:BufferUser	access:public	signature:()
~Serv	aaa.cpp	/^Serv::~Serv()$/;"	f	class:Serv	signature:()
~Serv	aaa.h	/^		virtual ~Serv();$/;"	p	class:Serv	access:public	signature:()
~SlaveThread	aaa.cpp	/^SlaveThread::~SlaveThread()$/;"	f	class:SlaveThread	signature:()
~SlaveThread	aaa.h	/^		virtual ~SlaveThread();$/;"	p	class:SlaveThread	access:public	signature:()
~TaskRunner	aaa.cpp	/^TaskRunner::~TaskRunner()$/;"	f	class:TaskRunner	signature:()
~TaskRunner	aaa.h	/^		virtual ~TaskRunner();$/;"	p	class:TaskRunner	access:public	signature:()
~ThreadPool	aaa.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
~ThreadPool	aaa.h	/^		virtual     ~ThreadPool();$/;"	p	class:ThreadPool	access:public	signature:()
~ThreadRequest	aaa.cpp	/^ThreadRequest::~ThreadRequest()$/;"	f	class:ThreadRequest	signature:()
~ThreadRequest	aaa.h	/^		virtual ~ThreadRequest();$/;"	p	class:ThreadRequest	access:public	signature:()
